*DuplicateWrite.txt*    Cascade the writing of a file to another location.

		      DUPLICATE WRITE    by Ingo Karkat
							  *DuplicateWrite.vim*
description			|DuplicateWrite-description|
usage				|DuplicateWrite-usage|
installation			|DuplicateWrite-installation|
configuration			|DuplicateWrite-configuration|
integration			|DuplicateWrite-integration|
limitations			|DuplicateWrite-limitations|
known problems			|DuplicateWrite-known-problems|
todo				|DuplicateWrite-todo|
history				|DuplicateWrite-history|

==============================================================================
DESCRIPTION					  *DuplicateWrite-description*

Though you should use scripts for automated deployment and version control for
merges, sometimes, you need to quickly duplicate a file to another file system
location whenever it is changed.
This plugin defines a |:DuplicateWrite| command that sets up additional
|:write| targets. From then on, whenever you save that buffer, the write is
cascaded to the additional files. Thus, when editing a script in your project
directory, you can have it immediately (on only on demand, with [!]) copied to
the install directory that is in the PATH. Or, with the help of the |netrw|
plugin, you can even automatically upload a locally edited HTML page to the
remote web server.

HOW IT WORKS								     *

The plugin hooks into the |BufWritePost| event to issue additional |:write|
commands.

RELATED WORKS								     *

- The FileSync plugin (vimscript #5064) can automatically sync files or
  directory trees on write, using a Vim command like !cp, |netrw| plugin, or
  custom function.
- The mirror.vim plugin (vimscript #5204) needs a mirror configuration, and
  then provides custom commands to open, diff, push, etc. mirrored files.

==============================================================================
USAGE							*DuplicateWrite-usage*
							     *:DuplicateWrite*
:DuplicateWrite[!] [++opt] [+cmd] [-cmd] {file}|{dirspec} [...]
			Create a cascaded write of the current buffer to the
			specified {file}, or to a file with the same filename
			located in {dirspec}. From now on, whenever the buffer
			is |:w|ritten, it will also be persisted to the passed
			location. (Until you |:bdelete| it.)
			With [!], duplication only happens with forced
			|:write!|, not with |:write|. This is useful if the
			duplication target is on a slow networked filesystem
			or if a file write triggers other costly actions
			(like a service restart after a config update).
			[++opt] is passed to |:write|. An optional [+cmd] is
			executed before the write; likewise, [-cmd] is
			executed after the write; the degenerate [-] will
			|:undo| any changes to the buffer done by [+cmd].
			In the {cmd}s, spaces and also special characters
			(|cmdline-special|) like % and <cword> must be
			escaped. The plugin supports a special <tfile>
			identifer that gets replaced with the duplicated
			target file.

			You can issue the command multiple times (with
			different {file} targets) for a buffer to add cascades
			to several concurrent locations.
							  *:DuplicateWriteOff*
:DuplicateWriteOff	Turn off all cascaded writes for the current buffer.

							 *:DuplicateWriteList*
:DuplicateWriteList	List the cascaded write target(s) for the current
			buffer.
						      *:DuplicateWriteListAll*
:DuplicateWriteListAll	List the cascaded write target(s) for all open
			buffers that have any. The buffers are listed with
			their number followed by the name; the targets are
			listed in the following, indented lines, for example:
			4  "DuplicateWrite.txt" -> ~
				"C:\temp\DuplicateWrite.txt" ~
				"X:\backup.txt" ~

==============================================================================
INSTALLATION					 *DuplicateWrite-installation*

This script is packaged as a |vimball|. If you have the "gunzip" decompressor
in your PATH, simply edit the *.vmb.gz package in Vim; otherwise, decompress
the archive first, e.g. using WinZip. Inside Vim, install by sourcing the
vimball or via the |:UseVimball| command. >
    vim DuplicateWrite*.vmb.gz
    :so %
To uninstall, use the |:RmVimball| command.

DEPENDENCIES					 *DuplicateWrite-dependencies*

- Requires Vim 7.0 or higher.
- Requires the |ingo-library.vim| plugin (vimscript #4433), version 1.025 or
  higher.

==============================================================================
CONFIGURATION					*DuplicateWrite-configuration*

For a permanent configuration, put the following commands into your |vimrc|:
	   *g:DuplicateWrite_DefaultMirrors* *b:DuplicateWrite_DefaultMirrors*
To avoid giving an argument to |:DuplicateWrite|, you can define a List of
{source-glob}, {argument-object} pairs: The part of the buffer's filespec that
matches {source-glob} will then be replaced by {argument-object}.pathspec to
yield the target: >
    let g:DuplicateWrite_DefaultMirrors = [
    \	['D:\project\foo', {'pathspec': 'X:\foo'}],
    \	['**\src\**', {
    \			'pathspec': 'E:\deploy',
    \			'bang': 0,
    \			'opt': '++ff=dos',
    \			'preCmd': '%s/Copyright: \zsXXXX/Acme Corp/e,
    \			'postCmd': 'UNDO'
    \		      }]
    \]
This would for example duplicate a file D:\project\foo\bin\zap.cmd to
X:\foo\bin\zap.cmd and any file anywhere inside a src/ directory directly to
E:\deploy when you execute |:DuplicateWrite|. A buffer-local configuration
overrides the global one. All matching {source-glob} are processed, so if you
need to duplicate to multiple locations, define several same {source-glob}s.

						*g:DuplicateWrite_EventIgnore*
The duplicate writes themselves also trigger |autocmd|s; we need this nesting
to let plugins like |netrw| interfere and handle special (remote) filesystem
locations. However, other plugins may also be triggered, and that may be
undesirable (for example, you don't want to trigger syntax checking on the
duplicates, or add them to a MRU list in Vim). Because of this, the plugin
ignores certain events (via 'eventignore') during its execution: >
    let g:DuplicateWrite_EventIgnore = 'BufWritePre,BufWritePost'
<			   *g:DuplicateWrite_CreateNonExistingTargetDirectory*
Especially when using default mirrors, the target directory for the duplicated
write may not exist yet. The following variable defines the plugin's behavior
in that case; either "no", "yes", or "ask": >
    let g:DuplicateWrite_CreateNonExistingTargetDirectory = 'ask'
<			  *g:DuplicateWrite_TargetDirectoryCheckIgnorePattern*
Remote target directories (e.g. |netrw| URLs like scp://path/to/file) cannot
be checked for existence; in order to be able to write to them (and skip the
useless target directory check), certain dirspecs (also local ones) can be
exempted. Any dirspec that matches the regular expression not checked: >
    let g:DuplicateWrite_TargetDirectoryCheckIgnorePattern = '^\a\+://'
<
==============================================================================
INTEGRATION					  *DuplicateWrite-integration*
							    *b:DuplicateWrite*
The filespecs of the cascaded write targets are stored in the buffer-local
List variable b:DuplicateWrite. You can use its existence / number of elements
to determine whether / how many duplications are configured, and use this e.g.
in a custom 'statusline'. To programatically add duplicate writes, use the
DuplicateWrite#Add() function.

==============================================================================
LIMITATIONS					  *DuplicateWrite-limitations*

KNOWN PROBLEMS				       *DuplicateWrite-known-problems*

TODO							 *DuplicateWrite-todo*

IDEAS							*DuplicateWrite-ideas*

==============================================================================
HISTORY						      *DuplicateWrite-history*

2.01	RELEASEME
- The target directory check interferes with remote (netrw) targets. Add
  g:DuplicateWrite_TargetDirectoryCheckIgnorePattern configuration that skips
  URIs by default.

2.00	24-Aug-2016
- ENH: Support passing [++opt] [+cmd] [-cmd] before filespecs, and allow
  multiple filespec arguments to :DuplicateWrite.
- ENH: Add default mirror configuration in g:DuplicateWrite_DefaultMirrors.
- Use nested autocmds, but allow to suppress certain events via
  g:DuplicateWrite_EventIgnore.
- ENH: Check for existence of target directory, and react according to
  g:DuplicateWrite_CreateNonExistingTargetDirectory.
- ENH: Support duplicate write only with :write when using :DuplicateWrite!
  during definition.
  *** You need to update to ingo-library (vimscript #4433) version 1.025! ***

1.01	13-Sep-2013
- FIX: Use full absolute path and normalize to be immune against changes in
  CWD.
  *** You need to update to ingo-library (vimscript #4433) version 1.013! ***

1.00	13-Sep-2013
First published version after a complete reimplementation.

0.01	19-Jul-2005
Started development.

==============================================================================
Copyright: (C) 2005-2017 Ingo Karkat
The VIM LICENSE applies to this plugin; see |copyright|.

Maintainer:	Ingo Karkat <ingo@karkat.de>
==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
